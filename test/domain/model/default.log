add(1, 2, 1)
add(2, 3, 1)
add(3, 4, 1)
add(4, 5, 1)
add(5, 6, 1)
add(6, 7, 1)
countAgreedPath. current: 1, dest: 7, min: 0, max: 9, currentUnit: 0
[1, 2] => 1
countAgreedPath. current: 2, dest: 7, min: 0, max: 9, currentUnit: 1
[2, 3] => 1
countAgreedPath. current: 3, dest: 7, min: 0, max: 9, currentUnit: 2
[3, 4] => 1
countAgreedPath. current: 4, dest: 7, min: 0, max: 9, currentUnit: 3
[4, 5] => 1
countAgreedPath. current: 5, dest: 7, min: 0, max: 9, currentUnit: 4
[5, 6] => 1
countAgreedPath. current: 6, dest: 7, min: 0, max: 9, currentUnit: 5
[6, 7] => 1
countAgreedPath. current: 7, dest: 7, min: 0, max: 9, currentUnit: 6
add(1, 2, 1)
add(2, 3, 1)
add(3, 4, 1)
add(4, 5, 1)
add(5, 6, 1)
add(6, 7, 1)
countAgreedPath. current: 1, dest: 7, min: 0, max: 5, currentUnit: 0
[1, 2] => 1
countAgreedPath. current: 2, dest: 7, min: 0, max: 5, currentUnit: 1
[2, 3] => 1
countAgreedPath. current: 3, dest: 7, min: 0, max: 5, currentUnit: 2
[3, 4] => 1
countAgreedPath. current: 4, dest: 7, min: 0, max: 5, currentUnit: 3
[4, 5] => 1
countAgreedPath. current: 5, dest: 7, min: 0, max: 5, currentUnit: 4
[5, 6] => 1
countAgreedPath. current: 6, dest: 7, min: 0, max: 5, currentUnit: 5
[6, 7] => 1
countAgreedPath. current: 7, dest: 7, min: 0, max: 5, currentUnit: 6
add(1, 2, 1)
add(2, 3, 1)
add(3, 4, 1)
add(4, 5, 1)
add(5, 6, 1)
add(6, 7, 1)
countAgreedPath. current: 1, dest: 7, min: 0, max: 6, currentUnit: 0
[1, 2] => 1
countAgreedPath. current: 2, dest: 7, min: 0, max: 6, currentUnit: 1
[2, 3] => 1
countAgreedPath. current: 3, dest: 7, min: 0, max: 6, currentUnit: 2
[3, 4] => 1
countAgreedPath. current: 4, dest: 7, min: 0, max: 6, currentUnit: 3
[4, 5] => 1
countAgreedPath. current: 5, dest: 7, min: 0, max: 6, currentUnit: 4
[5, 6] => 1
countAgreedPath. current: 6, dest: 7, min: 0, max: 6, currentUnit: 5
[6, 7] => 1
countAgreedPath. current: 7, dest: 7, min: 0, max: 6, currentUnit: 6
add(1, 2, 5)
add(2, 3, 4)
add(3, 4, 8)
add(4, 3, 8)
add(4, 5, 6)
add(1, 4, 5)
add(3, 5, 2)
add(5, 2, 3)
add(1, 5, 7)
countAgreedPath. current: 3, dest: 3, min: 1, max: 29, currentUnit: 0
[3, 4] => 8
countAgreedPath. current: 4, dest: 3, min: 1, max: 29, currentUnit: 8
[4, 3] => 8
countAgreedPath. current: 3, dest: 3, min: 1, max: 29, currentUnit: 16
[3, 4] => 8
countAgreedPath. current: 4, dest: 3, min: 1, max: 29, currentUnit: 24
[4, 3] => 8
countAgreedPath. current: 3, dest: 3, min: 1, max: 29, currentUnit: 32
[4, 5] => 6
countAgreedPath. current: 5, dest: 3, min: 1, max: 29, currentUnit: 30
[3, 5] => 2
countAgreedPath. current: 5, dest: 3, min: 1, max: 29, currentUnit: 18
[5, 2] => 3
countAgreedPath. current: 2, dest: 3, min: 1, max: 29, currentUnit: 21
[2, 3] => 4
countAgreedPath. current: 3, dest: 3, min: 1, max: 29, currentUnit: 25
[3, 4] => 8
countAgreedPath. current: 4, dest: 3, min: 1, max: 29, currentUnit: 33
[3, 5] => 2
countAgreedPath. current: 5, dest: 3, min: 1, max: 29, currentUnit: 27
[5, 2] => 3
countAgreedPath. current: 2, dest: 3, min: 1, max: 29, currentUnit: 30
[4, 5] => 6
countAgreedPath. current: 5, dest: 3, min: 1, max: 29, currentUnit: 14
[5, 2] => 3
countAgreedPath. current: 2, dest: 3, min: 1, max: 29, currentUnit: 17
[2, 3] => 4
countAgreedPath. current: 3, dest: 3, min: 1, max: 29, currentUnit: 21
[3, 4] => 8
countAgreedPath. current: 4, dest: 3, min: 1, max: 29, currentUnit: 29
[4, 3] => 8
countAgreedPath. current: 3, dest: 3, min: 1, max: 29, currentUnit: 37
[4, 5] => 6
countAgreedPath. current: 5, dest: 3, min: 1, max: 29, currentUnit: 35
[3, 5] => 2
countAgreedPath. current: 5, dest: 3, min: 1, max: 29, currentUnit: 23
[5, 2] => 3
countAgreedPath. current: 2, dest: 3, min: 1, max: 29, currentUnit: 26
[2, 3] => 4
countAgreedPath. current: 3, dest: 3, min: 1, max: 29, currentUnit: 30
[3, 5] => 2
countAgreedPath. current: 5, dest: 3, min: 1, max: 29, currentUnit: 2
[5, 2] => 3
countAgreedPath. current: 2, dest: 3, min: 1, max: 29, currentUnit: 5
[2, 3] => 4
countAgreedPath. current: 3, dest: 3, min: 1, max: 29, currentUnit: 9
[3, 4] => 8
countAgreedPath. current: 4, dest: 3, min: 1, max: 29, currentUnit: 17
[4, 3] => 8
countAgreedPath. current: 3, dest: 3, min: 1, max: 29, currentUnit: 25
[3, 4] => 8
countAgreedPath. current: 4, dest: 3, min: 1, max: 29, currentUnit: 33
[3, 5] => 2
countAgreedPath. current: 5, dest: 3, min: 1, max: 29, currentUnit: 27
[5, 2] => 3
countAgreedPath. current: 2, dest: 3, min: 1, max: 29, currentUnit: 30
[4, 5] => 6
countAgreedPath. current: 5, dest: 3, min: 1, max: 29, currentUnit: 23
[5, 2] => 3
countAgreedPath. current: 2, dest: 3, min: 1, max: 29, currentUnit: 26
[2, 3] => 4
countAgreedPath. current: 3, dest: 3, min: 1, max: 29, currentUnit: 30
[3, 5] => 2
countAgreedPath. current: 5, dest: 3, min: 1, max: 29, currentUnit: 11
[5, 2] => 3
countAgreedPath. current: 2, dest: 3, min: 1, max: 29, currentUnit: 14
[2, 3] => 4
countAgreedPath. current: 3, dest: 3, min: 1, max: 29, currentUnit: 18
[3, 4] => 8
countAgreedPath. current: 4, dest: 3, min: 1, max: 29, currentUnit: 26
[4, 3] => 8
countAgreedPath. current: 3, dest: 3, min: 1, max: 29, currentUnit: 34
[4, 5] => 6
countAgreedPath. current: 5, dest: 3, min: 1, max: 29, currentUnit: 32
[3, 5] => 2
countAgreedPath. current: 5, dest: 3, min: 1, max: 29, currentUnit: 20
[5, 2] => 3
countAgreedPath. current: 2, dest: 3, min: 1, max: 29, currentUnit: 23
[2, 3] => 4
countAgreedPath. current: 3, dest: 3, min: 1, max: 29, currentUnit: 27
[3, 4] => 8
countAgreedPath. current: 4, dest: 3, min: 1, max: 29, currentUnit: 35
[3, 5] => 2
countAgreedPath. current: 5, dest: 3, min: 1, max: 29, currentUnit: 29
[5, 2] => 3
countAgreedPath. current: 2, dest: 3, min: 1, max: 29, currentUnit: 32
add(1, 2, 5)
add(2, 1, 7)
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 0
[1, 2] => 5
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 5
[2, 1] => 7
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 12
[1, 2] => 5
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 17
[2, 1] => 7
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 24
[1, 2] => 5
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 29
[2, 1] => 7
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 36
[1, 2] => 5
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 41
[2, 1] => 7
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 48
[1, 2] => 5
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 53
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 0
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 1
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 2
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 3
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 4
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 5
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 6
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 7
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 8
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 9
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 10
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 11
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 12
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 13
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 14
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 15
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 16
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 17
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 18
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 19
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 20
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 21
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 22
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 23
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 24
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 25
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 26
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 27
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 28
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 29
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 30
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 31
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 32
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 33
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 34
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 35
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 36
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 37
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 38
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 39
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 40
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 41
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 42
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 43
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 44
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 45
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 46
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 47
[2, 1] => 1
countAgreedPath. current: 1, dest: 1, min: 1, max: 48, currentUnit: 48
[1, 2] => 1
countAgreedPath. current: 2, dest: 1, min: 1, max: 48, currentUnit: 49
add(1, 2, 1)
add(2, 3, 1)
add(3, 4, 1)
add(4, 5, 1)
add(5, 6, 1)
add(6, 7, 1)
getMinimum. src: 1, dest: 7
begin town:
1
2
3
4
5
6
7
end town:
current: 1
current adjacent: (1, 2, 1) 
next: 2
after  [1, 2] => 1
current: 2
current adjacent: (2, 3, 1) 
next: 3
after  [2, 3] => 2
current: 3
current adjacent: (3, 4, 1) 
next: 4
after  [3, 4] => 3
current: 4
current adjacent: (4, 5, 1) 
next: 5
after  [4, 5] => 4
current: 5
current adjacent: (5, 6, 1) 
next: 6
after  [5, 6] => 5
current: 6
current adjacent: (6, 7, 1) 
next: 7
after  [6, 7] => 6
current: 7
current adjacent: 
add(1, 2, 1)
add(2, 1, 1)
getMinimum. src: 1, dest: 1
begin town:
1
2
end town:
current: 1
current adjacent: (1, 2, 1) 
next: 2
after  [1, 2] => 1
current: 2
current adjacent: (2, 1, 1) 
next: 1
after  [2, 1] => 2
current: 1
current adjacent: (1, 2, 1) 
next: 2
add(1, 2, 1)
add(2, 3, 1)
add(3, 4, 1)
add(4, 5, 1)
add(5, 6, 1)
add(6, 7, 1)
add(1, 2, 1)
add(2, 3, 1)
add(3, 4, 1)
add(4, 5, 1)
add(5, 6, 1)
add(6, 7, 1)
add(1, 2, 1)
add(2, 3, 1)
add(3, 4, 1)
add(4, 5, 1)
add(5, 6, 1)
add(6, 7, 1)
add(1, 2, 1)
add(2, 3, 1)
add(3, 4, 1)
add(4, 5, 1)
add(5, 6, 1)
add(6, 7, 1)
getMinimum. src: 1, dest: 7
begin town:
1
2
3
4
5
6
7
end town:
current: 1
current adjacent: (1, 2, 1) 
next: 2
after  [1, 2] => 1
current: 2
current adjacent: (2, 3, 1) 
next: 3
after  [2, 3] => 2
current: 3
current adjacent: (3, 4, 1) 
next: 4
after  [3, 4] => 3
current: 4
current adjacent: (4, 5, 1) 
next: 5
after  [4, 5] => 4
current: 5
current adjacent: (5, 6, 1) 
next: 6
after  [5, 6] => 5
current: 6
current adjacent: (6, 7, 1) 
next: 7
after  [6, 7] => 6
current: 7
current adjacent: 
add(1, 2, 1)
add(2, 3, 1)
add(3, 4, 1)
add(4, 5, 1)
add(5, 6, 1)
add(6, 7, 1)
getMinimum. src: 1, dest: 7
begin town:
1
2
3
4
5
6
7
end town:
current: 1
current adjacent: (1, 2, 1) 
next: 2
after  [1, 2] => 1
current: 2
current adjacent: (2, 3, 1) 
next: 3
after  [2, 3] => 2
current: 3
current adjacent: (3, 4, 1) 
next: 4
after  [3, 4] => 3
current: 4
current adjacent: (4, 5, 1) 
next: 5
after  [4, 5] => 4
current: 5
current adjacent: (5, 6, 1) 
next: 6
after  [5, 6] => 5
current: 6
current adjacent: (6, 7, 1) 
next: 7
after  [6, 7] => 6
current: 7
current adjacent: 
add(1, 2, 5)
add(2, 3, 4)
add(3, 4, 8)
add(4, 3, 8)
add(4, 5, 6)
add(1, 4, 5)
add(3, 5, 2)
add(5, 2, 3)
add(1, 5, 7)
getMinimum. src: 1, dest: 3
begin town:
1
2
3
4
5
end town:
current: 1
current adjacent: (1, 2, 5) (1, 4, 5) (1, 5, 7) 
next: 2
after  [1, 2] => 5
next: 4
after  [1, 4] => 5
next: 5
after  [1, 5] => 7
current: 2
current adjacent: (2, 3, 4) 
next: 3
after  [2, 3] => 9
current: 4
current adjacent: (4, 3, 8) (4, 5, 6) 
next: 3
next: 5
current: 5
current adjacent: (5, 2, 3) 
next: 2
current: 3
current adjacent: (3, 4, 8) (3, 5, 2) 
next: 4
next: 5
add(1, 2, 5)
add(2, 3, 4)
add(3, 4, 8)
add(4, 3, 8)
add(4, 5, 6)
add(1, 4, 5)
add(3, 5, 2)
add(5, 2, 3)
add(1, 5, 7)
countAgreedPath. current: 3, dest: 3, min: 1, max: 3, currentUnit: 0
[3, 4] => 1
countAgreedPath. current: 4, dest: 3, min: 1, max: 3, currentUnit: 1
[4, 3] => 1
countAgreedPath. current: 3, dest: 3, min: 1, max: 3, currentUnit: 2
[3, 4] => 1
countAgreedPath. current: 4, dest: 3, min: 1, max: 3, currentUnit: 3
[4, 3] => 1
countAgreedPath. current: 3, dest: 3, min: 1, max: 3, currentUnit: 4
[4, 5] => 1
countAgreedPath. current: 5, dest: 3, min: 1, max: 3, currentUnit: 4
[3, 5] => 1
countAgreedPath. current: 5, dest: 3, min: 1, max: 3, currentUnit: 3
[5, 2] => 1
countAgreedPath. current: 2, dest: 3, min: 1, max: 3, currentUnit: 4
[4, 5] => 1
countAgreedPath. current: 5, dest: 3, min: 1, max: 3, currentUnit: 2
[5, 2] => 1
countAgreedPath. current: 2, dest: 3, min: 1, max: 3, currentUnit: 3
[2, 3] => 1
countAgreedPath. current: 3, dest: 3, min: 1, max: 3, currentUnit: 4
[3, 5] => 1
countAgreedPath. current: 5, dest: 3, min: 1, max: 3, currentUnit: 1
[5, 2] => 1
countAgreedPath. current: 2, dest: 3, min: 1, max: 3, currentUnit: 2
[2, 3] => 1
countAgreedPath. current: 3, dest: 3, min: 1, max: 3, currentUnit: 3
[3, 4] => 1
countAgreedPath. current: 4, dest: 3, min: 1, max: 3, currentUnit: 4
[3, 5] => 1
countAgreedPath. current: 5, dest: 3, min: 1, max: 3, currentUnit: 4
add(1, 2, 1)
add(2, 3, 1)
add(3, 4, 1)
add(4, 5, 1)
add(5, 6, 1)
add(6, 7, 1)
getMinimum. src: 1, dest: 8
begin town:
1
2
3
4
5
6
7
end town:
current: 1
current adjacent: (1, 2, 1) 
next: 2
after  [1, 2] => 1
current: 2
current adjacent: (2, 3, 1) 
next: 3
after  [2, 3] => 2
current: 3
current adjacent: (3, 4, 1) 
next: 4
after  [3, 4] => 3
current: 4
current adjacent: (4, 5, 1) 
next: 5
after  [4, 5] => 4
current: 5
current adjacent: (5, 6, 1) 
next: 6
after  [5, 6] => 5
current: 6
current adjacent: (6, 7, 1) 
next: 7
after  [6, 7] => 6
current: 7
current adjacent: 
add(1, 2, 1)
add(2, 3, 1)
add(4, 5, 1)
add(5, 6, 1)
add(6, 7, 1)
getMinimum. src: 1, dest: 7
begin town:
1
2
3
4
5
6
7
end town:
current: 1
current adjacent: (1, 2, 1) 
next: 2
after  [1, 2] => 1
current: 2
current adjacent: (2, 3, 1) 
next: 3
after  [2, 3] => 2
current: 3
current adjacent: 
add(1, 2, 5)
add(2, 3, 4)
add(3, 4, 8)
add(4, 3, 8)
add(4, 5, 6)
add(1, 4, 5)
add(3, 5, 2)
add(5, 2, 3)
add(1, 5, 7)
from 1 to 2: length: 5
from 2 to 3: length: 4
add(1, 2, 5)
add(2, 3, 4)
add(3, 4, 8)
add(4, 3, 8)
add(4, 5, 6)
add(1, 4, 5)
add(3, 5, 2)
add(5, 2, 3)
add(1, 5, 7)
from 1 to 4: length: 5
add(1, 2, 5)
add(2, 3, 4)
add(3, 4, 8)
add(4, 3, 8)
add(4, 5, 6)
add(1, 4, 5)
add(3, 5, 2)
add(5, 2, 3)
add(1, 5, 7)
from 1 to 4: length: 5
from 4 to 3: length: 8
add(1, 2, 5)
add(2, 3, 4)
add(3, 4, 8)
add(4, 3, 8)
add(4, 5, 6)
add(1, 4, 5)
add(3, 5, 2)
add(5, 2, 3)
add(1, 5, 7)
from 1 to 5: length: 7
from 5 to 2: length: 3
from 2 to 3: length: 4
from 3 to 4: length: 8
add(1, 2, 5)
add(2, 3, 4)
add(3, 4, 8)
add(4, 3, 8)
add(4, 5, 6)
add(1, 4, 5)
add(3, 5, 2)
add(5, 2, 3)
add(1, 5, 7)
from 1 to 5: length: 7
from 5 to 4: length: 2147483647
add(1, 2, 5)
add(2, 3, 4)
add(3, 4, 8)
add(4, 3, 8)
add(4, 5, 6)
add(1, 4, 5)
add(3, 5, 2)
add(5, 2, 3)
add(1, 5, 7)
from 1 to 3: length: 2147483647
getMinimum. src: 1, dest: 2
begin town:
end town:
current: 1
current adjacent: 
from 1 to 2: length: 2147483647
countAgreedPath. current: 1, dest: 2, min: 3, max: 3, currentUnit: 0
